<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>基礎 on ものコン-wiki</title><link>https://jinnosukekato.github.io/monokon-wiki/tags/%E5%9F%BA%E7%A4%8E/index.html</link><description>Recent content in 基礎 on ものコン-wiki</description><generator>Hugo -- gohugo.io</generator><language>ja</language><atom:link href="https://jinnosukekato.github.io/monokon-wiki/tags/%E5%9F%BA%E7%A4%8E/index.xml" rel="self" type="application/rss+xml"/><item><title>ものコンとは</title><link>https://jinnosukekato.github.io/monokon-wiki/about-monokon/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jinnosukekato.github.io/monokon-wiki/about-monokon/index.html</guid><description>このページでは、ものコン(電子回路組立部門)がどんなことをするのか簡単に説明します 正式名称 正式名称は 高校生ものづくりコンテスト(電子回路組立</description></item><item><title>基礎構文</title><link>https://jinnosukekato.github.io/monokon-wiki/software/syntax/language/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jinnosukekato.github.io/monokon-wiki/software/syntax/language/index.html</guid><description>setup() この関数はプログラムが実行されたあとに一度だけ呼び出されます この関数の中には pinMode など最初に一度だけ行えばよい処理を記述します // 2番ピンをアウ</description></item><item><title>接続図</title><link>https://jinnosukekato.github.io/monokon-wiki/hardware/connections/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jinnosukekato.github.io/monokon-wiki/hardware/connections/index.html</guid><description>このページでは、県大会で使用するハードウェアについて解説します 制御の流れ ものコンでは 制御対象装置 、 入力回路基板 と制御用コンピューターを接続し</description></item><item><title>変数</title><link>https://jinnosukekato.github.io/monokon-wiki/software/syntax/variables/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jinnosukekato.github.io/monokon-wiki/software/syntax/variables/index.html</guid><description>変数とは、値を格納できる箱のようなものです 実際には、変数を宣言することによって、指定された型の分だけメモリ空間を確保し、そのメモリ空間へのア</description></item><item><title>演算子</title><link>https://jinnosukekato.github.io/monokon-wiki/software/syntax/operators/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jinnosukekato.github.io/monokon-wiki/software/syntax/operators/index.html</guid><description>演算子を用いることで様々な演算を行うことができます Arduino言語には様々な演算子がありますが、このセクションでは算術演算子、比較演算子、</description></item><item><title>条件分岐</title><link>https://jinnosukekato.github.io/monokon-wiki/software/syntax/conditional-branch/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jinnosukekato.github.io/monokon-wiki/software/syntax/conditional-branch/index.html</guid><description>条件分岐文は、その名の通り、ある条件を評価し、処理を分岐させる文です 例えば、センサーの値や変数の値によって処理を変えたいときに使用します if</description></item><item><title>反復処理</title><link>https://jinnosukekato.github.io/monokon-wiki/software/syntax/iteration/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jinnosukekato.github.io/monokon-wiki/software/syntax/iteration/index.html</guid><description>同じような処理を繰り返して実行するようなときには繰り返し文を使用します 繰り返し文を使用することで、プログラムの行数を削減し、プログラムを記述</description></item><item><title>関数</title><link>https://jinnosukekato.github.io/monokon-wiki/software/syntax/functions/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jinnosukekato.github.io/monokon-wiki/software/syntax/functions/index.html</guid><description>プログラムを書いているときに、同じ処理を何度も別の場所で行うことがよくあります 例えば、ステッピングモーターを回すなどです 処理の行数が少なかっ</description></item><item><title>動かないときは</title><link>https://jinnosukekato.github.io/monokon-wiki/trouble-shooting/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jinnosukekato.github.io/monokon-wiki/trouble-shooting/index.html</guid><description>エラーコードが出てるときはエラーコードを読む！ エラーコードは赤色で、英語で、よくわからなくて、怖いかもしれませんが、恐れることはありません エ</description></item><item><title>7セグメント</title><link>https://jinnosukekato.github.io/monokon-wiki/hardware/about-parts/output-parts/seven-segment/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jinnosukekato.github.io/monokon-wiki/hardware/about-parts/output-parts/seven-segment/index.html</guid><description>説明 7つのセグメント(棒)と小数点の点灯を切り替えることで、数字や文字を表示することができます 制御対象基盤には2つ取り付けてあり、指定のピン</description></item><item><title>analogRead</title><link>https://jinnosukekato.github.io/monokon-wiki/software/embedded-functions/analogread/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jinnosukekato.github.io/monokon-wiki/software/embedded-functions/analogread/index.html</guid><description>リファレンス 説明 指定したピンをアナログ値で読み取ります 注意すべき点 返り値は最大10bitsの値です 2^10は1024なので0~1023の整数</description></item><item><title>DCモーター</title><link>https://jinnosukekato.github.io/monokon-wiki/hardware/about-parts/output-parts/dc-motor/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jinnosukekato.github.io/monokon-wiki/hardware/about-parts/output-parts/dc-motor/index.html</guid><description>説明 DCモーターは回る、止まるの動作のみをする基本的なモーターです プログラムで、回転する方向、速度、停止の素早さを制御できます 制御方法 2つの</description></item><item><title>delay</title><link>https://jinnosukekato.github.io/monokon-wiki/software/embedded-functions/delay/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jinnosukekato.github.io/monokon-wiki/software/embedded-functions/delay/index.html</guid><description>リファレンス 説明 指定したミリ秒の間、プログラム全体の動作を停止させます 注意すべき点 プログラム全体が停止することに留意してください 例えば、待ち</description></item><item><title>digitalRead</title><link>https://jinnosukekato.github.io/monokon-wiki/software/embedded-functions/digitalread/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jinnosukekato.github.io/monokon-wiki/software/embedded-functions/digitalread/index.html</guid><description>リファレンス 説明 指定したピンをデジタル値で読み取ります 注意すべき点 読み取った値は HIGH, LOW として返ってきますが、booleanに代入可能です 入力基</description></item><item><title>digitalWrite</title><link>https://jinnosukekato.github.io/monokon-wiki/software/embedded-functions/digitalwrite/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jinnosukekato.github.io/monokon-wiki/software/embedded-functions/digitalwrite/index.html</guid><description>リファレンス 説明 ピンに対してデジタル出力(LOW, HIGH)を行います 注意すべき点 一度HIGHを出力したピンはLOWを出力するまでHIGHが</description></item><item><title>millis</title><link>https://jinnosukekato.github.io/monokon-wiki/software/embedded-functions/millis/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jinnosukekato.github.io/monokon-wiki/software/embedded-functions/millis/index.html</guid><description>リファレンス 説明 プログラムが書き込まれ、実行されてからの経過時間(ミリ秒)を返す関数です 注意すべき点 返り値は unsigned long 型です int に値を代入することも</description></item><item><title>noTone</title><link>https://jinnosukekato.github.io/monokon-wiki/software/embedded-functions/notone/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jinnosukekato.github.io/monokon-wiki/software/embedded-functions/notone/index.html</guid><description>リファレンス 説明 tone で鳴らした音を消す関数です 注意すべき点 特になし サンプルコード noTone(ピン番号); // 4番で鳴らした音を1秒後に消す tone(4, 440);</description></item><item><title>pinMode</title><link>https://jinnosukekato.github.io/monokon-wiki/software/embedded-functions/pinmode/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jinnosukekato.github.io/monokon-wiki/software/embedded-functions/pinmode/index.html</guid><description>リファレンス 説明 指定したピンをインプットもしくはアウトプットとして設定します 入力を読み取る場合(スイッチやセンサー)にはインプットを、出力を</description></item><item><title>tone</title><link>https://jinnosukekato.github.io/monokon-wiki/software/embedded-functions/tone/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jinnosukekato.github.io/monokon-wiki/software/embedded-functions/tone/index.html</guid><description>リファレンス 説明 指定したピンに指定した周波数の信号を送る関数です 鳴らし続ける時間(ミリ秒)を指定することも可能です 注意すべき点 鳴らし続ける時</description></item><item><title>ステッピングモーター</title><link>https://jinnosukekato.github.io/monokon-wiki/hardware/about-parts/output-parts/stepper/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jinnosukekato.github.io/monokon-wiki/hardware/about-parts/output-parts/stepper/index.html</guid><description>説明 ステッピングモーターは回転する角度を調節できるモーターです プログラムで、回転する方向、角度、速度を調節することができます 制御方法 4つのピ</description></item><item><title>タクトスイッチ</title><link>https://jinnosukekato.github.io/monokon-wiki/hardware/about-parts/input-parts/tact-switch/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jinnosukekato.github.io/monokon-wiki/hardware/about-parts/input-parts/tact-switch/index.html</guid><description>説明 押している間のみ通電する、最も単純なスイッチです 入力基盤によって、プルアップ・プルダウンがあるので注意しましょう 使用方法 digitalRead 関数を用いて値</description></item><item><title>ピン対応表</title><link>https://jinnosukekato.github.io/monokon-wiki/hardware/pin-assignment/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jinnosukekato.github.io/monokon-wiki/hardware/pin-assignment/index.html</guid><description>Arduino Mega (大きいほう) 連絡いただければ基盤データは渡します ピン番号 接続先 メモ 1 Vcc 2 7セグ左ON/OFF 3 7セグ右ON/OFF 4 ブザー toneで鳴</description></item><item><title>ブザー</title><link>https://jinnosukekato.github.io/monokon-wiki/hardware/about-parts/output-parts/buzzer/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jinnosukekato.github.io/monokon-wiki/hardware/about-parts/output-parts/buzzer/index.html</guid><description>説明 ブザーは一定の周波数の音を鳴らすことができます プログラムで周波数、音を鳴らす長さを指定することができます 制御方法 Arduino言語に含ま</description></item><item><title>ホトカプラ</title><link>https://jinnosukekato.github.io/monokon-wiki/hardware/about-parts/input-parts/photo-coupler/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jinnosukekato.github.io/monokon-wiki/hardware/about-parts/input-parts/photo-coupler/index.html</guid><description>説明 明るさを読み取ることができるセンサーです 使用方法 digitalRead 関数を使用すると HIGH / LOW で値を読み取ることができます analogRead 関数を使用するとアナログ値で読み取</description></item><item><title>可変抵抗</title><link>https://jinnosukekato.github.io/monokon-wiki/hardware/about-parts/input-parts/variable-resister/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jinnosukekato.github.io/monokon-wiki/hardware/about-parts/input-parts/variable-resister/index.html</guid><description>説明 軸がどれだけ回転されられたかを読み取ることができます 出力値は、0から1023の1024段階で出力されます 使用方法 digitalRead 関数を使用すると HIGH / LOW</description></item></channel></rss>